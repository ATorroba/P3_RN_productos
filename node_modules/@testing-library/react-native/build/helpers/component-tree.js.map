{"version":3,"file":"component-tree.js","names":["isHostElement","element","type","getHostParent","current","parent","getHostChildren","hostChildren","children","forEach","child","push","getHostSelves","getHostSiblings","hostParent","hostSelves","filter","sibling","includes"],"sources":["../../src/helpers/component-tree.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\n\n/**\n * Checks if the given element is a host element.\n * @param element The element to check.\n */\nexport function isHostElement(element?: ReactTestInstance | null): boolean {\n  return typeof element?.type === 'string';\n}\n\n/**\n * Returns first host ancestor for given element.\n * @param element The element start traversing from.\n */\nexport function getHostParent(\n  element: ReactTestInstance | null\n): ReactTestInstance | null {\n  if (element == null) {\n    return null;\n  }\n\n  let current = element.parent;\n  while (current) {\n    if (isHostElement(current)) {\n      return current;\n    }\n\n    current = current.parent;\n  }\n\n  return null;\n}\n\n/**\n * Returns host children for given element.\n * @param element The element start traversing from.\n */\nexport function getHostChildren(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  if (element == null) {\n    return [];\n  }\n\n  const hostChildren: ReactTestInstance[] = [];\n\n  element.children.forEach((child) => {\n    if (typeof child !== 'object') {\n      return;\n    }\n\n    if (isHostElement(child)) {\n      hostChildren.push(child);\n    } else {\n      hostChildren.push(...getHostChildren(child));\n    }\n  });\n\n  return hostChildren;\n}\n\n/**\n * Return the array of host elements that represent the passed element.\n *\n * @param element The element start traversing from.\n * @returns If the passed element is a host element, it will return an array containing only that element,\n * if the passed element is a composite element, it will return an array containing its host children (zero, one or many).\n */\nexport function getHostSelves(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  return typeof element?.type === 'string'\n    ? [element]\n    : getHostChildren(element);\n}\n\n/**\n * Returns host siblings for given element.\n * @param element The element start traversing from.\n */\nexport function getHostSiblings(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  const hostParent = getHostParent(element);\n  const hostSelves = getHostSelves(element);\n  return getHostChildren(hostParent).filter(\n    (sibling) => !hostSelves.includes(sibling)\n  );\n}\n"],"mappings":";;;;;;;;;;;AAEA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,OAAvB,EAAoE;EACzE,OAAO,OAAOA,OAAO,EAAEC,IAAhB,KAAyB,QAAhC;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,aAAT,CACLF,OADK,EAEqB;EAC1B,IAAIA,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,IAAIG,OAAO,GAAGH,OAAO,CAACI,MAAtB;;EACA,OAAOD,OAAP,EAAgB;IACd,IAAIJ,aAAa,CAACI,OAAD,CAAjB,EAA4B;MAC1B,OAAOA,OAAP;IACD;;IAEDA,OAAO,GAAGA,OAAO,CAACC,MAAlB;EACD;;EAED,OAAO,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,eAAT,CACLL,OADK,EAEgB;EACrB,IAAIA,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAO,EAAP;EACD;;EAED,MAAMM,YAAiC,GAAG,EAA1C;EAEAN,OAAO,CAACO,QAAR,CAAiBC,OAAjB,CAA0BC,KAAD,IAAW;IAClC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B;IACD;;IAED,IAAIV,aAAa,CAACU,KAAD,CAAjB,EAA0B;MACxBH,YAAY,CAACI,IAAb,CAAkBD,KAAlB;IACD,CAFD,MAEO;MACLH,YAAY,CAACI,IAAb,CAAkB,GAAGL,eAAe,CAACI,KAAD,CAApC;IACD;EACF,CAVD;EAYA,OAAOH,YAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASK,aAAT,CACLX,OADK,EAEgB;EACrB,OAAO,OAAOA,OAAO,EAAEC,IAAhB,KAAyB,QAAzB,GACH,CAACD,OAAD,CADG,GAEHK,eAAe,CAACL,OAAD,CAFnB;AAGD;AAED;AACA;AACA;AACA;;;AACO,SAASY,eAAT,CACLZ,OADK,EAEgB;EACrB,MAAMa,UAAU,GAAGX,aAAa,CAACF,OAAD,CAAhC;EACA,MAAMc,UAAU,GAAGH,aAAa,CAACX,OAAD,CAAhC;EACA,OAAOK,eAAe,CAACQ,UAAD,CAAf,CAA4BE,MAA5B,CACJC,OAAD,IAAa,CAACF,UAAU,CAACG,QAAX,CAAoBD,OAApB,CADT,CAAP;AAGD"}